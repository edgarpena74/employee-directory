{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","url","useState","users","setUsers","useEffect","fetch","then","res","json","data","results","Container","className","Row","Button","type","onClick","sort","a","b","dob","age","console","log","Table","striped","bordered","hover","map","user","Image","src","picture","large","rounded","name","first","last","cell","location","city","state","country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAwGeA,MAjFf,WACE,IAAMC,EAAM,uCADC,EAMaC,mBAAS,IANtB,mBAMNC,EANM,KAMCC,EAND,KA2Bb,OAlBAC,qBAAU,WAKRC,MAAML,GACHM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAELN,EAASM,EAAKC,cAPjB,IAiBD,gCACE,cAACC,EAAA,EAAD,CAAWC,UAAU,QAArB,SACE,sDAEF,eAACD,EAAA,EAAD,CAAWC,UAAU,OAArB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAZZ,WAChBd,EAAMe,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,IAAIC,IAAMF,EAAEC,IAAIC,OACvCC,QAAQC,IAAIrB,IAUN,2BAIF,cAACW,EAAA,EAAD,UACE,eAACW,EAAA,EAAD,CAAOZ,UAAU,QAAQa,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA/C,UACE,0BACA,gCAGGzB,EAAM0B,KAAI,SAACC,GAAD,OACT,qBAAIjB,UAAU,WAAd,UAEE,oBAAIA,UAAU,KAAd,SACE,cAACkB,EAAA,EAAD,CAAOC,IAAKF,EAAKG,QAAQC,MAAOC,SAAO,MAGzC,qBAAItB,UAAU,KAAd,UACGiB,EAAKM,KAAKC,MADb,IAGGP,EAAKM,KAAKE,QAEb,qBAAIzB,UAAU,KAAd,qBAEGiB,EAAKT,IAAIC,OAGZ,qBAAIT,UAAU,KAAd,8BAEGiB,EAAKS,QAGR,qBAAI1B,UAAU,KAAd,UACGiB,EAAKU,SAASC,KADjB,QAEGX,EAAKU,SAASE,MAFjB,QAGGZ,EAAKU,SAASG,+BChFpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a6fabfb8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Table from \"react-bootstrap/Table\";\nimport Image from \"react-bootstrap/Image\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\n\n//state is kind of like a global variable, when it updates it will\n//rerender the component you are in. When it changes it will show you\n//the updated version of it.\n\n//useEffect is kind of like use something when something changes\n//you tell it what to watch and what to do.\n//telling the useEffect to watch something, it will rerun a function\n//having it watch nothing it will only run once when the\n//component mounts(when you initially render the component)\n\n//when you load a web page app.js mounts\n//when you reload it remounts\n//when you update the state and it rerenders it does not remount\n\nfunction App() {\n  const url = \"https://randomuser.me/api/?results=5\";\n  //[name of state, function to change state]\n  //useState returns an array of the state and the function and destructures it\n  //to two separate variables\n  //                                empty square is our starting state\n  const [users, setUsers] = useState([]);\n\n  //the brackets is where you hold the things you want to watch\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  function getUsers() {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        //the users becomes what the data.results is\n        setUsers(data.results);\n      });\n  }\n\n  const sortUsers = function sortUsers() {\n    users.sort((a, b) => a.dob.age - b.dob.age);\n    console.log(users);\n  };\n\n  return (\n    <div>\n      <Container className=\"title\">\n        <h1>Employee Directory</h1>\n      </Container>\n      <Container className=\"info\">\n        <Row>\n          <Button type=\"button\" onClick={sortUsers}>\n            Sort by Age\n          </Button>\n        </Row>\n        <Row>\n          <Table className=\"table\" striped bordered hover>\n            <thead></thead>\n            <tbody>\n              {/* Table row for first and last */}\n\n              {users.map((user) => (\n                <tr className=\"tabelRow\">\n                  {/* image of person */}\n                  <td className=\"td\">\n                    <Image src={user.picture.large} rounded />\n                  </td>\n                  {/* persons first and last name */}\n                  <td className=\"td\">\n                    {user.name.first}\n                    {` `}\n                    {user.name.last}\n                  </td>\n                  <td className=\"td\">\n                    Age:{` `}\n                    {user.dob.age}\n                  </td>\n                  {/* users cell phone number */}\n                  <td className=\"td\">\n                    Phone Number:{` `}\n                    {user.cell}\n                  </td>\n                  {/* users location */}\n                  <td className=\"td\">\n                    {user.location.city},{` `}\n                    {user.location.state},{` `}\n                    {user.location.country}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}